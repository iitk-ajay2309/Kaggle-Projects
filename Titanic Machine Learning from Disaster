{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7e778949",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:35:58.096179Z",
     "iopub.status.busy": "2025-04-26T11:35:58.095681Z",
     "iopub.status.idle": "2025-04-26T11:35:58.102515Z",
     "shell.execute_reply": "2025-04-26T11:35:58.101251Z"
    },
    "papermill": {
     "duration": 0.021334,
     "end_time": "2025-04-26T11:35:58.104849",
     "exception": false,
     "start_time": "2025-04-26T11:35:58.083515",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#pip install kaggle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5b399485",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-26T11:35:58.125295Z",
     "iopub.status.busy": "2025-04-26T11:35:58.124820Z",
     "iopub.status.idle": "2025-04-26T11:35:59.251796Z",
     "shell.execute_reply": "2025-04-26T11:35:59.250520Z"
    },
    "papermill": {
     "duration": 1.139966,
     "end_time": "2025-04-26T11:35:59.254166",
     "exception": false,
     "start_time": "2025-04-26T11:35:58.114200",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2917413f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:35:59.276087Z",
     "iopub.status.busy": "2025-04-26T11:35:59.275635Z",
     "iopub.status.idle": "2025-04-26T11:36:01.012941Z",
     "shell.execute_reply": "2025-04-26T11:36:01.011458Z"
    },
    "papermill": {
     "duration": 1.752008,
     "end_time": "2025-04-26T11:36:01.015487",
     "exception": false,
     "start_time": "2025-04-26T11:35:59.263479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\r\n",
      "  File \"/opt/conda/bin/kaggle\", line 5, in <module>\r\n",
      "    from kaggle.cli import main\r\n",
      "  File \"/opt/conda/lib/python3.10/site-packages/kaggle/__init__.py\", line 7, in <module>\r\n",
      "    api.authenticate()\r\n",
      "  File \"/opt/conda/lib/python3.10/site-packages/kaggle/api/kaggle_api_extended.py\", line 398, in authenticate\r\n",
      "    raise IOError('Could not find {}. Make sure it\\'s located in'\r\n",
      "OSError: Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method.\r\n"
     ]
    }
   ],
   "source": [
    "! kaggle competitions download -c titanic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "93652437",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.035694Z",
     "iopub.status.busy": "2025-04-26T11:36:01.035263Z",
     "iopub.status.idle": "2025-04-26T11:36:01.064229Z",
     "shell.execute_reply": "2025-04-26T11:36:01.062744Z"
    },
    "papermill": {
     "duration": 0.042079,
     "end_time": "2025-04-26T11:36:01.066722",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.024643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "os.chdir(\"/kaggle/input/titanic\")\n",
    "train_df = pd.read_csv(\"train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fce0ed72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.088402Z",
     "iopub.status.busy": "2025-04-26T11:36:01.087887Z",
     "iopub.status.idle": "2025-04-26T11:36:01.129744Z",
     "shell.execute_reply": "2025-04-26T11:36:01.128407Z"
    },
    "papermill": {
     "duration": 0.056137,
     "end_time": "2025-04-26T11:36:01.132956",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.076819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>651</th>\n",
       "      <td>652</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Doling, Miss. Elsie</td>\n",
       "      <td>female</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>231919</td>\n",
       "      <td>23.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>555</th>\n",
       "      <td>556</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Wright, Mr. George</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113807</td>\n",
       "      <td>26.5500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>268</th>\n",
       "      <td>269</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Mrs. William Thompson (Edith Junkins)</td>\n",
       "      <td>female</td>\n",
       "      <td>58.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>PC 17582</td>\n",
       "      <td>153.4625</td>\n",
       "      <td>C125</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>145</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Andrew, Mr. Edgardo Samuel</td>\n",
       "      <td>male</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>231945</td>\n",
       "      <td>11.5000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>370</th>\n",
       "      <td>371</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Harder, Mr. George Achilles</td>\n",
       "      <td>male</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11765</td>\n",
       "      <td>55.4417</td>\n",
       "      <td>E50</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "651          652         1       2   \n",
       "555          556         0       1   \n",
       "268          269         1       1   \n",
       "144          145         0       2   \n",
       "370          371         1       1   \n",
       "\n",
       "                                              Name     Sex   Age  SibSp  \\\n",
       "651                            Doling, Miss. Elsie  female  18.0      0   \n",
       "555                             Wright, Mr. George    male  62.0      0   \n",
       "268  Graham, Mrs. William Thompson (Edith Junkins)  female  58.0      0   \n",
       "144                     Andrew, Mr. Edgardo Samuel    male  18.0      0   \n",
       "370                    Harder, Mr. George Achilles    male  25.0      1   \n",
       "\n",
       "     Parch    Ticket      Fare Cabin Embarked  \n",
       "651      1    231919   23.0000   NaN        S  \n",
       "555      0    113807   26.5500   NaN        S  \n",
       "268      1  PC 17582  153.4625  C125        S  \n",
       "144      0    231945   11.5000   NaN        S  \n",
       "370      0     11765   55.4417   E50        C  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "de669425",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.154865Z",
     "iopub.status.busy": "2025-04-26T11:36:01.154435Z",
     "iopub.status.idle": "2025-04-26T11:36:01.160736Z",
     "shell.execute_reply": "2025-04-26T11:36:01.159438Z"
    },
    "papermill": {
     "duration": 0.020654,
     "end_time": "2025-04-26T11:36:01.163670",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.143016",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df_cp = train_df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bb442a0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.185897Z",
     "iopub.status.busy": "2025-04-26T11:36:01.184577Z",
     "iopub.status.idle": "2025-04-26T11:36:01.220435Z",
     "shell.execute_reply": "2025-04-26T11:36:01.219169Z"
    },
    "papermill": {
     "duration": 0.049725,
     "end_time": "2025-04-26T11:36:01.223383",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.173658",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "365cf2bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.245547Z",
     "iopub.status.busy": "2025-04-26T11:36:01.244957Z",
     "iopub.status.idle": "2025-04-26T11:36:01.252570Z",
     "shell.execute_reply": "2025-04-26T11:36:01.251386Z"
    },
    "papermill": {
     "duration": 0.021452,
     "end_time": "2025-04-26T11:36:01.255083",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.233631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "survival % 38.38383838383838\n"
     ]
    }
   ],
   "source": [
    "(train_df.Survived == 1).sum()\n",
    "print(\"survival %\", (342/891)*100)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea3af711",
   "metadata": {
    "papermill": {
     "duration": 0.009797,
     "end_time": "2025-04-26T11:36:01.275141",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.265344",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c4dd8306",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.298707Z",
     "iopub.status.busy": "2025-04-26T11:36:01.298321Z",
     "iopub.status.idle": "2025-04-26T11:36:01.313526Z",
     "shell.execute_reply": "2025-04-26T11:36:01.311981Z"
    },
    "papermill": {
     "duration": 0.03059,
     "end_time": "2025-04-26T11:36:01.316221",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.285631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived  Pclass\n",
       "0         1          80\n",
       "          2          97\n",
       "          3         372\n",
       "1         1         136\n",
       "          2          87\n",
       "          3         119\n",
       "Name: PassengerId, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.groupby(['Survived', 'Pclass']).PassengerId.count()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cabe15a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.339787Z",
     "iopub.status.busy": "2025-04-26T11:36:01.338539Z",
     "iopub.status.idle": "2025-04-26T11:36:01.351478Z",
     "shell.execute_reply": "2025-04-26T11:36:01.350280Z"
    },
    "papermill": {
     "duration": 0.027313,
     "end_time": "2025-04-26T11:36:01.353913",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.326600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived  Sex   \n",
       "0         female     81\n",
       "          male      468\n",
       "1         female    233\n",
       "          male      109\n",
       "Name: PassengerId, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.groupby(['Survived', 'Sex']).PassengerId.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce72c2f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-16T11:05:13.310231Z",
     "iopub.status.busy": "2025-03-16T11:05:13.309704Z",
     "iopub.status.idle": "2025-03-16T11:05:13.316568Z",
     "shell.execute_reply": "2025-03-16T11:05:13.315180Z",
     "shell.execute_reply.started": "2025-03-16T11:05:13.310193Z"
    },
    "papermill": {
     "duration": 0.009913,
     "end_time": "2025-04-26T11:36:01.374457",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.364544",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "59b1860e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.398540Z",
     "iopub.status.busy": "2025-04-26T11:36:01.397286Z",
     "iopub.status.idle": "2025-04-26T11:36:01.415588Z",
     "shell.execute_reply": "2025-04-26T11:36:01.414376Z"
    },
    "papermill": {
     "duration": 0.032787,
     "end_time": "2025-04-26T11:36:01.418279",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.385492",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>592</th>\n",
       "      <td>593</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Elsbury, Mr. William James</td>\n",
       "      <td>male</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 3902</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>794</th>\n",
       "      <td>795</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dantcheff, Mr. Ristiu</td>\n",
       "      <td>male</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349203</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>476</th>\n",
       "      <td>477</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Renouf, Mr. Peter Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>34.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>31027</td>\n",
       "      <td>21.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>68</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Crease, Mr. Ernest James</td>\n",
       "      <td>male</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>S.P. 3464</td>\n",
       "      <td>8.1583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>661</th>\n",
       "      <td>662</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Badt, Mr. Mohamed</td>\n",
       "      <td>male</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2623</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                        Name   Sex   Age  \\\n",
       "592          593         0       3  Elsbury, Mr. William James  male  47.0   \n",
       "794          795         0       3       Dantcheff, Mr. Ristiu  male  25.0   \n",
       "476          477         0       2     Renouf, Mr. Peter Henry  male  34.0   \n",
       "67            68         0       3    Crease, Mr. Ernest James  male  19.0   \n",
       "661          662         0       3           Badt, Mr. Mohamed  male  40.0   \n",
       "\n",
       "     SibSp  Parch     Ticket     Fare Cabin Embarked  \n",
       "592      0      0   A/5 3902   7.2500   NaN        S  \n",
       "794      0      0     349203   7.8958   NaN        S  \n",
       "476      1      0      31027  21.0000   NaN        S  \n",
       "67       0      0  S.P. 3464   8.1583   NaN        S  \n",
       "661      0      0       2623   7.2250   NaN        C  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22665dc7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-16T11:07:08.620552Z",
     "iopub.status.busy": "2025-03-16T11:07:08.620063Z",
     "iopub.status.idle": "2025-03-16T11:07:08.628451Z",
     "shell.execute_reply": "2025-03-16T11:07:08.627074Z",
     "shell.execute_reply.started": "2025-03-16T11:07:08.620513Z"
    },
    "papermill": {
     "duration": 0.011358,
     "end_time": "2025-04-26T11:36:01.439966",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.428608",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "99ecb1bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-16T11:07:24.756591Z",
     "iopub.status.busy": "2025-03-16T11:07:24.756136Z",
     "iopub.status.idle": "2025-03-16T11:07:24.768331Z",
     "shell.execute_reply": "2025-03-16T11:07:24.767200Z",
     "shell.execute_reply.started": "2025-03-16T11:07:24.756557Z"
    },
    "papermill": {
     "duration": 0.009739,
     "end_time": "2025-04-26T11:36:01.460146",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.450407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "35353354",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-16T11:03:33.343225Z",
     "iopub.status.busy": "2025-03-16T11:03:33.342735Z",
     "iopub.status.idle": "2025-03-16T11:03:33.351712Z",
     "shell.execute_reply": "2025-03-16T11:03:33.350425Z",
     "shell.execute_reply.started": "2025-03-16T11:03:33.343191Z"
    },
    "papermill": {
     "duration": 0.010373,
     "end_time": "2025-04-26T11:36:01.480436",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.470063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "46d40816",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.502175Z",
     "iopub.status.busy": "2025-04-26T11:36:01.501767Z",
     "iopub.status.idle": "2025-04-26T11:36:01.538332Z",
     "shell.execute_reply": "2025-04-26T11:36:01.536917Z"
    },
    "papermill": {
     "duration": 0.050658,
     "end_time": "2025-04-26T11:36:01.540959",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.490301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>GENDER</th>\n",
       "      <th>EMBARK_M</th>\n",
       "      <th>Fare_class</th>\n",
       "      <th>Cabin2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>314</th>\n",
       "      <td>315</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Hart, Mr. Benjamin</td>\n",
       "      <td>male</td>\n",
       "      <td>1.022986</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>F.C.C. 13529</td>\n",
       "      <td>-0.119819</td>\n",
       "      <td>H</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>119</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Baxter, Mr. Quigg Edmond</td>\n",
       "      <td>male</td>\n",
       "      <td>-0.438326</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>PC 17558</td>\n",
       "      <td>4.332899</td>\n",
       "      <td>B58 B60</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-1.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                      Name   Sex       Age  \\\n",
       "314          315         0       2        Hart, Mr. Benjamin  male  1.022986   \n",
       "118          119         0       1  Baxter, Mr. Quigg Edmond  male -0.438326   \n",
       "\n",
       "     SibSp  Parch        Ticket      Fare    Cabin Embarked  GENDER  EMBARK_M  \\\n",
       "314      1      1  F.C.C. 13529 -0.119819        H        S       1       1.0   \n",
       "118      0      1      PC 17558  4.332899  B58 B60        C       1      -1.0   \n",
       "\n",
       "     Fare_class  Cabin2  \n",
       "314         1.0     0.0  \n",
       "118         2.0    -1.5  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df = train_df_cp.copy()\n",
    "#lets map male and female as O and 1 \n",
    "map_gender = {'female': 0,\n",
    "      'male': 1}\n",
    "train_df['GENDER'] = train_df.Sex.map(map_gender)\n",
    "embark_map = {\"C\": -1, \"Q\": 0, \"S\":1}\n",
    "train_df['EMBARK_M'] = train_df['Embarked'].map(embark_map)\n",
    "\n",
    "#age entries are missing so taking average age for those\n",
    "train_df.loc[train_df.Age.isna(), 'Age']= train_df.Age.mean()\n",
    "\n",
    "train_df.loc[train_df.Fare >= 33, 'Fare_class'] = 2\n",
    "train_df.loc[(train_df.Fare >= 14.5)&(train_df.Fare < 33), 'Fare_class'] = 1\n",
    "train_df.loc[(train_df.Fare >= 8)&(train_df.Fare < 14.5), 'Fare_class'] = 0\n",
    "train_df.loc[train_df.Fare < 8, 'Fare_class'] = -1\n",
    "\n",
    "#normalising age and fare before ML\n",
    "train_df['Age'] = (train_df['Age'] - train_df['Age'].mean())/train_df['Age'].std()\n",
    "\n",
    "train_df['Fare'] = (train_df['Fare'] - train_df['Fare'].mean())/train_df['Fare'].std()\n",
    "\n",
    "#checking cabin info:\n",
    "train_df.loc[train_df.Cabin.isna(),'Cabin']='H'\n",
    "\n",
    "train_df['Cabin2'] = train_df.Cabin.str[0]\n",
    "\n",
    "#train_df.Cabin2.unique() \n",
    "cabin_map = {'A':-2, 'B':-1.5, 'C':-1, 'D':-0.5 , 'E':0,'F': 0.5,  'G': 1, 'H':0, 'T':1.5}\n",
    "\n",
    "train_df.Cabin2 = train_df.Cabin2.map(cabin_map)\n",
    "train_df.sample(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6e38638b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.563467Z",
     "iopub.status.busy": "2025-04-26T11:36:01.563093Z",
     "iopub.status.idle": "2025-04-26T11:36:01.568175Z",
     "shell.execute_reply": "2025-04-26T11:36:01.567007Z"
    },
    "papermill": {
     "duration": 0.019222,
     "end_time": "2025-04-26T11:36:01.570638",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.551416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#model training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1526da3d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.594285Z",
     "iopub.status.busy": "2025-04-26T11:36:01.593877Z",
     "iopub.status.idle": "2025-04-26T11:36:01.601139Z",
     "shell.execute_reply": "2025-04-26T11:36:01.599956Z"
    },
    "papermill": {
     "duration": 0.022465,
     "end_time": "2025-04-26T11:36:01.604026",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.581561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "#columns selected for study\n",
    "train_df_parm = train_df[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'GENDER', 'EMBARK_M', 'Cabin2']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a39475f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.626962Z",
     "iopub.status.busy": "2025-04-26T11:36:01.626598Z",
     "iopub.status.idle": "2025-04-26T11:36:01.634393Z",
     "shell.execute_reply": "2025-04-26T11:36:01.633087Z"
    },
    "papermill": {
     "duration": 0.022594,
     "end_time": "2025-04-26T11:36:01.637080",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.614486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/1408854912.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  train_df_parm.EMBARK_M = train_df_parm.EMBARK_M.fillna(0)\n"
     ]
    }
   ],
   "source": [
    "train_df_parm.EMBARK_M = train_df_parm.EMBARK_M.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92251ceb",
   "metadata": {
    "papermill": {
     "duration": 0.010729,
     "end_time": "2025-04-26T11:36:01.660354",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.649625",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4544fca6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.685541Z",
     "iopub.status.busy": "2025-04-26T11:36:01.685156Z",
     "iopub.status.idle": "2025-04-26T11:36:01.691894Z",
     "shell.execute_reply": "2025-04-26T11:36:01.690014Z"
    },
    "papermill": {
     "duration": 0.023295,
     "end_time": "2025-04-26T11:36:01.694790",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.671495",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y = train_df['Survived']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3135b56a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.787912Z",
     "iopub.status.busy": "2025-04-26T11:36:01.787425Z",
     "iopub.status.idle": "2025-04-26T11:36:01.800076Z",
     "shell.execute_reply": "2025-04-26T11:36:01.798360Z"
    },
    "papermill": {
     "duration": 0.097211,
     "end_time": "2025-04-26T11:36:01.802677",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.705466",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pclass  Embarked  Survived\n",
       "1       C         0            26\n",
       "                  1            59\n",
       "        Q         0             1\n",
       "                  1             1\n",
       "        S         0            53\n",
       "                  1            74\n",
       "2       C         0             8\n",
       "                  1             9\n",
       "        Q         0             1\n",
       "                  1             2\n",
       "        S         0            88\n",
       "                  1            76\n",
       "3       C         0            41\n",
       "                  1            25\n",
       "        Q         0            45\n",
       "                  1            27\n",
       "        S         0           286\n",
       "                  1            67\n",
       "Name: PassengerId, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.groupby([\"Pclass\",\"Embarked\", \"Survived\"]).PassengerId.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3adb3b39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.826279Z",
     "iopub.status.busy": "2025-04-26T11:36:01.825912Z",
     "iopub.status.idle": "2025-04-26T11:36:01.837495Z",
     "shell.execute_reply": "2025-04-26T11:36:01.836397Z"
    },
    "papermill": {
     "duration": 0.025968,
     "end_time": "2025-04-26T11:36:01.839948",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.813980",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Fare_class  Survived\n",
       "-1.0        0           189\n",
       "            1            52\n",
       " 0.0        0           149\n",
       "            1            60\n",
       " 1.0        0           127\n",
       "            1           105\n",
       " 2.0        0            84\n",
       "            1           125\n",
       "Name: PassengerId, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.groupby([\"Fare_class\", \"Survived\"]).PassengerId.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36d6f85e",
   "metadata": {
    "papermill": {
     "duration": 0.011152,
     "end_time": "2025-04-26T11:36:01.862093",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.850941",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2c138651",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.885868Z",
     "iopub.status.busy": "2025-04-26T11:36:01.885504Z",
     "iopub.status.idle": "2025-04-26T11:36:01.893415Z",
     "shell.execute_reply": "2025-04-26T11:36:01.892373Z"
    },
    "papermill": {
     "duration": 0.022679,
     "end_time": "2025-04-26T11:36:01.895749",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.873070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lets add a catagory for cabin as well\n",
    "\n",
    "train_df.Cabin.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f2f600c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.919466Z",
     "iopub.status.busy": "2025-04-26T11:36:01.919090Z",
     "iopub.status.idle": "2025-04-26T11:36:01.950008Z",
     "shell.execute_reply": "2025-04-26T11:36:01.948667Z"
    },
    "papermill": {
     "duration": 0.045695,
     "end_time": "2025-04-26T11:36:01.952443",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.906748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>GENDER</th>\n",
       "      <th>EMBARK_M</th>\n",
       "      <th>Cabin2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>8.910000e+02</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>8.910000e+02</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.308642</td>\n",
       "      <td>2.272780e-16</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>-1.196200e-17</td>\n",
       "      <td>0.647587</td>\n",
       "      <td>0.534231</td>\n",
       "      <td>-0.184063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.836071</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.477990</td>\n",
       "      <td>0.791603</td>\n",
       "      <td>0.488421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-2.251891e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-6.480577e-01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>-5.921480e-01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-4.888737e-01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-3.571902e-01</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.076970e-01</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2.423274e-02</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.868699e+00</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>9.661740e+00</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Pclass           Age       SibSp       Parch          Fare  \\\n",
       "count  891.000000  8.910000e+02  891.000000  891.000000  8.910000e+02   \n",
       "mean     2.308642  2.272780e-16    0.523008    0.381594 -1.196200e-17   \n",
       "std      0.836071  1.000000e+00    1.102743    0.806057  1.000000e+00   \n",
       "min      1.000000 -2.251891e+00    0.000000    0.000000 -6.480577e-01   \n",
       "25%      2.000000 -5.921480e-01    0.000000    0.000000 -4.888737e-01   \n",
       "50%      3.000000  0.000000e+00    0.000000    0.000000 -3.571902e-01   \n",
       "75%      3.000000  4.076970e-01    1.000000    0.000000 -2.423274e-02   \n",
       "max      3.000000  3.868699e+00    8.000000    6.000000  9.661740e+00   \n",
       "\n",
       "           GENDER    EMBARK_M      Cabin2  \n",
       "count  891.000000  891.000000  891.000000  \n",
       "mean     0.647587    0.534231   -0.184063  \n",
       "std      0.477990    0.791603    0.488421  \n",
       "min      0.000000   -1.000000   -2.000000  \n",
       "25%      0.000000    0.000000    0.000000  \n",
       "50%      1.000000    1.000000    0.000000  \n",
       "75%      1.000000    1.000000    0.000000  \n",
       "max      1.000000    1.000000    1.500000  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df_parm.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a17dd615",
   "metadata": {
    "papermill": {
     "duration": 0.011498,
     "end_time": "2025-04-26T11:36:01.974944",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.963446",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#modelling with logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a001059b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:01.998986Z",
     "iopub.status.busy": "2025-04-26T11:36:01.998602Z",
     "iopub.status.idle": "2025-04-26T11:36:03.790372Z",
     "shell.execute_reply": "2025-04-26T11:36:03.788890Z"
    },
    "papermill": {
     "duration": 1.807656,
     "end_time": "2025-04-26T11:36:03.794019",
     "exception": false,
     "start_time": "2025-04-26T11:36:01.986363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#modelling the parameters:\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_curve, auc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6df97691",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:03.820267Z",
     "iopub.status.busy": "2025-04-26T11:36:03.819856Z",
     "iopub.status.idle": "2025-04-26T11:36:03.836747Z",
     "shell.execute_reply": "2025-04-26T11:36:03.834940Z"
    },
    "papermill": {
     "duration": 0.033683,
     "end_time": "2025-04-26T11:36:03.839752",
     "exception": false,
     "start_time": "2025-04-26T11:36:03.806069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>GENDER</th>\n",
       "      <th>EMBARK_M</th>\n",
       "      <th>Cabin2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>3</td>\n",
       "      <td>-0.438326</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.486064</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Pclass       Age  SibSp  Parch      Fare  GENDER  EMBARK_M  Cabin2\n",
       "89       3 -0.438326      0      0 -0.486064       1       1.0     0.0"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df_parm.sample()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "a1218439",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:03.869426Z",
     "iopub.status.busy": "2025-04-26T11:36:03.868893Z",
     "iopub.status.idle": "2025-04-26T11:36:03.878039Z",
     "shell.execute_reply": "2025-04-26T11:36:03.876797Z"
    },
    "papermill": {
     "duration": 0.028942,
     "end_time": "2025-04-26T11:36:03.881372",
     "exception": false,
     "start_time": "2025-04-26T11:36:03.852430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    " \n",
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(train_df_parm, y, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b7e76a22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:03.907859Z",
     "iopub.status.busy": "2025-04-26T11:36:03.907472Z",
     "iopub.status.idle": "2025-04-26T11:36:03.937560Z",
     "shell.execute_reply": "2025-04-26T11:36:03.936207Z"
    },
    "papermill": {
     "duration": 0.047248,
     "end_time": "2025-04-26T11:36:03.940495",
     "exception": false,
     "start_time": "2025-04-26T11:36:03.893247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LogisticRegression()\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2ef971ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:03.969700Z",
     "iopub.status.busy": "2025-04-26T11:36:03.969188Z",
     "iopub.status.idle": "2025-04-26T11:36:03.979263Z",
     "shell.execute_reply": "2025-04-26T11:36:03.977480Z"
    },
    "papermill": {
     "duration": 0.029205,
     "end_time": "2025-04-26T11:36:03.982587",
     "exception": false,
     "start_time": "2025-04-26T11:36:03.953382",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_prob_score = model.predict_proba(X_test)[:, 1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "093ae3d3",
   "metadata": {
    "papermill": {
     "duration": 0.015286,
     "end_time": "2025-04-26T11:36:04.010817",
     "exception": false,
     "start_time": "2025-04-26T11:36:03.995531",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "aa229df1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:04.039086Z",
     "iopub.status.busy": "2025-04-26T11:36:04.038660Z",
     "iopub.status.idle": "2025-04-26T11:36:04.047250Z",
     "shell.execute_reply": "2025-04-26T11:36:04.045817Z"
    },
    "papermill": {
     "duration": 0.02616,
     "end_time": "2025-04-26T11:36:04.050007",
     "exception": false,
     "start_time": "2025-04-26T11:36:04.023847",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.94779632, -0.3996775 , -0.29434719, -0.11463112,  0.12715358,\n",
       "        -2.59362113, -0.23128012,  0.05848817]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3d5a8fc3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:04.075934Z",
     "iopub.status.busy": "2025-04-26T11:36:04.075567Z",
     "iopub.status.idle": "2025-04-26T11:36:04.095194Z",
     "shell.execute_reply": "2025-04-26T11:36:04.093406Z"
    },
    "papermill": {
     "duration": 0.036081,
     "end_time": "2025-04-26T11:36:04.098182",
     "exception": false,
     "start_time": "2025-04-26T11:36:04.062101",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "when threshold is: 0.3\n",
      "[[76 29]\n",
      " [ 9 65]]\n",
      "when threshold is: 0.4\n",
      "[[85 20]\n",
      " [13 61]]\n",
      "when threshold is: 0.5\n",
      "[[90 15]\n",
      " [20 54]]\n",
      "when threshold is: 0.6\n",
      "[[95 10]\n",
      " [22 52]]\n",
      "when threshold is: 0.7\n",
      "[[102   3]\n",
      " [ 32  42]]\n",
      "when threshold is: 0.8\n",
      "[[105   0]\n",
      " [ 47  27]]\n"
     ]
    }
   ],
   "source": [
    "#plotting different confusion matrix to set thrreshold\n",
    "\n",
    "for threshold in [.3,.4,.5,.6,.7,.8]:\n",
    "    print(f'when threshold is:',threshold )\n",
    "    #y_pred = np.array()\n",
    "    y_pred = np.where(y_prob_score<threshold,0,1)\n",
    "    print(confusion_matrix(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "248c3ce6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:04.128216Z",
     "iopub.status.busy": "2025-04-26T11:36:04.127818Z",
     "iopub.status.idle": "2025-04-26T11:36:04.141517Z",
     "shell.execute_reply": "2025-04-26T11:36:04.140209Z"
    },
    "papermill": {
     "duration": 0.03083,
     "end_time": "2025-04-26T11:36:04.143954",
     "exception": false,
     "start_time": "2025-04-26T11:36:04.113124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 80.45%\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[102,   3],\n",
       "       [ 32,  42]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#\n",
    "y_prd = np.where(y_prob_score<0.7,0,1)\n",
    "accuracy = accuracy_score(y_test, y_prd)\n",
    "print(\"Accuracy: {:.2f}%\".format(accuracy * 100))\n",
    "confusion_matrix(y_test, y_prd)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "946b7b89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-16T11:53:45.386147Z",
     "iopub.status.busy": "2025-03-16T11:53:45.385622Z",
     "iopub.status.idle": "2025-03-16T11:53:45.392706Z",
     "shell.execute_reply": "2025-03-16T11:53:45.391126Z",
     "shell.execute_reply.started": "2025-03-16T11:53:45.386108Z"
    },
    "papermill": {
     "duration": 0.011901,
     "end_time": "2025-04-26T11:36:04.168359",
     "exception": false,
     "start_time": "2025-04-26T11:36:04.156458",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Training with NN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "23fab009",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:04.196044Z",
     "iopub.status.busy": "2025-04-26T11:36:04.195602Z",
     "iopub.status.idle": "2025-04-26T11:36:19.951649Z",
     "shell.execute_reply": "2025-04-26T11:36:19.949730Z"
    },
    "papermill": {
     "duration": 15.77356,
     "end_time": "2025-04-26T11:36:19.954348",
     "exception": false,
     "start_time": "2025-04-26T11:36:04.180788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-26 11:36:07.133426: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2025-04-26 11:36:07.133599: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2025-04-26 11:36:07.314237: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# lets use neural networks for the problems\n",
    "\n",
    "import tensorflow as tf\n",
    "\n",
    "\n",
    "nn_model = tf.keras.models.Sequential([\n",
    " \n",
    "  tf.keras.layers.Dense(3, activation='relu'),\n",
    "  \n",
    "  tf.keras.layers.Dense(1, activation='sigmoid')\n",
    "])\n",
    "\n",
    "nn_model.compile(\n",
    "              loss= 'binary_crossentropy',\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "765af1b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:19.982926Z",
     "iopub.status.busy": "2025-04-26T11:36:19.981198Z",
     "iopub.status.idle": "2025-04-26T11:36:21.580547Z",
     "shell.execute_reply": "2025-04-26T11:36:21.579001Z"
    },
    "papermill": {
     "duration": 1.616275,
     "end_time": "2025-04-26T11:36:21.583477",
     "exception": false,
     "start_time": "2025-04-26T11:36:19.967202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3217 - loss: 0.7559\n",
      "Epoch 2/5\n",
      "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.3595 - loss: 0.7496\n",
      "Epoch 3/5\n",
      "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5300 - loss: 0.7023 \n",
      "Epoch 4/5\n",
      "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6048 - loss: 0.7112 \n",
      "Epoch 5/5\n",
      "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6287 - loss: 0.6882 \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.history.History at 0x7ec56bbc4790>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#nn_model.compile(loss= tf.keras.losses.binary_crossentropy())\n",
    "nn_model.fit(X_train, y_train, epochs=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "cfaa2530",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:21.613613Z",
     "iopub.status.busy": "2025-04-26T11:36:21.613133Z",
     "iopub.status.idle": "2025-04-26T11:36:21.853101Z",
     "shell.execute_reply": "2025-04-26T11:36:21.851713Z"
    },
    "papermill": {
     "duration": 0.258104,
     "end_time": "2025-04-26T11:36:21.855861",
     "exception": false,
     "start_time": "2025-04-26T11:36:21.597757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6372 - loss: 0.6692  \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.6652682423591614, 0.6536312699317932]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nn_model.evaluate(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c339c6f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:21.886511Z",
     "iopub.status.busy": "2025-04-26T11:36:21.885408Z",
     "iopub.status.idle": "2025-04-26T11:36:22.069082Z",
     "shell.execute_reply": "2025-04-26T11:36:22.067507Z"
    },
    "papermill": {
     "duration": 0.201958,
     "end_time": "2025-04-26T11:36:22.071858",
     "exception": false,
     "start_time": "2025-04-26T11:36:21.869900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step \n",
      "when threshold is: 0.1\n",
      "[[  0 105]\n",
      " [  0  74]]\n",
      "when threshold is: 0.2\n",
      "[[  0 105]\n",
      " [  0  74]]\n",
      "when threshold is: 0.3\n",
      "[[  0 105]\n",
      " [  0  74]]\n",
      "when threshold is: 0.4\n",
      "[[  0 105]\n",
      " [  0  74]]\n",
      "when threshold is: 0.5\n",
      "[[97  8]\n",
      " [54 20]]\n",
      "when threshold is: 0.6\n",
      "[[100   5]\n",
      " [ 61  13]]\n",
      "when threshold is: 0.7\n",
      "[[103   2]\n",
      " [ 64  10]]\n",
      "when threshold is: 0.8\n",
      "[[104   1]\n",
      " [ 70   4]]\n",
      "when threshold is: 0.9\n",
      "[[105   0]\n",
      " [ 73   1]]\n"
     ]
    }
   ],
   "source": [
    "#layer1, layer2 = nn_model.layers\n",
    "y_prb_nn = nn_model.predict(X_test)\n",
    "for threshold in [.1,.2, .3,.4,.5,.6,.7,.8, 0.9]:\n",
    "    print(f'when threshold is:',threshold )\n",
    "    #y_pred = np.array()\n",
    "    y_pred = np.where(y_prb_nn<threshold,0,1)\n",
    "    print(confusion_matrix(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "cb19ce4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:22.104471Z",
     "iopub.status.busy": "2025-04-26T11:36:22.104048Z",
     "iopub.status.idle": "2025-04-26T11:36:22.117797Z",
     "shell.execute_reply": "2025-04-26T11:36:22.116177Z"
    },
    "papermill": {
     "duration": 0.033796,
     "end_time": "2025-04-26T11:36:22.120964",
     "exception": false,
     "start_time": "2025-04-26T11:36:22.087168",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_df = pd.read_csv('test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "3d1ae6e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:22.152562Z",
     "iopub.status.busy": "2025-04-26T11:36:22.152070Z",
     "iopub.status.idle": "2025-04-26T11:36:22.190849Z",
     "shell.execute_reply": "2025-04-26T11:36:22.189273Z"
    },
    "papermill": {
     "duration": 0.056593,
     "end_time": "2025-04-26T11:36:22.193460",
     "exception": false,
     "start_time": "2025-04-26T11:36:22.136867",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>GENDER</th>\n",
       "      <th>EMBARK_M</th>\n",
       "      <th>Cabin2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>1</td>\n",
       "      <td>-0.259019</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3.79007</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pclass       Age  SibSp  Parch     Fare  GENDER  EMBARK_M  Cabin2\n",
       "184       1 -0.259019      1      1  3.79007       0        -1    -1.5"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df2 = test_df.copy()\n",
    "#lets map male and female as O and 1 \n",
    "map_gender = {'female': 0,\n",
    "      'male': 1}\n",
    "test_df2['GENDER'] = test_df2.Sex.map(map_gender)\n",
    "embark_map = {\"C\": -1, \"Q\": 0, \"S\":1}\n",
    "test_df2['EMBARK_M'] = test_df2['Embarked'].map(embark_map)\n",
    "\n",
    "#age entries are missing so taking average age for those\n",
    "test_df2.loc[test_df2.Age.isna(), 'Age']= test_df2.Age.mean()\n",
    "\n",
    "test_df2.loc[test_df2.Fare >= 33, 'Fare_class'] = 2\n",
    "test_df2.loc[(test_df2.Fare >= 14.5)&(test_df2.Fare < 33), 'Fare_class'] = 1\n",
    "test_df2.loc[(test_df2.Fare >= 8)&(test_df2.Fare < 14.5), 'Fare_class'] = 0\n",
    "test_df2.loc[test_df2.Fare < 8, 'Fare_class'] = -1\n",
    "\n",
    "#normalising age and fare before ML\n",
    "test_df2['Age'] = (test_df2['Age'] - test_df2['Age'].mean())/test_df2['Age'].std()\n",
    "\n",
    "test_df2['Fare'] = (test_df2['Fare'] - test_df2['Fare'].mean())/test_df2['Fare'].std()\n",
    "\n",
    "#checking cabin info:\n",
    "test_df2.loc[test_df2.Cabin.isna(),'Cabin']='H'\n",
    "\n",
    "test_df2['Cabin2'] = test_df2.Cabin.str[0]\n",
    "\n",
    "#test_df2.Cabin2.unique() \n",
    "cabin_map = {'A':-2, 'B':-1.5, 'C':-1, 'D':-0.5 , 'E':0,'F': 0.5,  'G': 1, 'H':0, 'T':1.5}\n",
    "\n",
    "test_df2.Cabin2 = test_df2.Cabin2.map(cabin_map)\n",
    "#test_df2.sample(2)\n",
    "\n",
    "test_df2.loc[test_df2.Fare.isna(), 'Fare']= test_df2.Age.mean()\n",
    "\n",
    "test_df_x = test_df2[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'GENDER', 'EMBARK_M', 'Cabin2']]\n",
    "\n",
    "test_df_x.sample()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "f03cfd4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:22.223579Z",
     "iopub.status.busy": "2025-04-26T11:36:22.223096Z",
     "iopub.status.idle": "2025-04-26T11:36:22.351818Z",
     "shell.execute_reply": "2025-04-26T11:36:22.350600Z"
    },
    "papermill": {
     "duration": 0.14741,
     "end_time": "2025-04-26T11:36:22.354412",
     "exception": false,
     "start_time": "2025-04-26T11:36:22.207002",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step \n"
     ]
    }
   ],
   "source": [
    " #= model.predict(test_df_x)\n",
    "y_test_prob_score = model.predict_proba(test_df_x)[:, 1]\n",
    "\n",
    "y_prdct1 = np.where(y_test_prob_score<0.7,0,1)\n",
    "\n",
    "y_prb_nn = nn_model.predict(test_df_x)\n",
    "\n",
    "y_prdct2 = np.where(y_prb_nn<0.7,0,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b13a418",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-16T12:13:42.709371Z",
     "iopub.status.busy": "2025-03-16T12:13:42.708781Z",
     "iopub.status.idle": "2025-03-16T12:13:42.720240Z",
     "shell.execute_reply": "2025-03-16T12:13:42.718474Z",
     "shell.execute_reply.started": "2025-03-16T12:13:42.709328Z"
    },
    "papermill": {
     "duration": 0.01297,
     "end_time": "2025-04-26T11:36:22.381161",
     "exception": false,
     "start_time": "2025-04-26T11:36:22.368191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "5c3dec7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:22.410243Z",
     "iopub.status.busy": "2025-04-26T11:36:22.409715Z",
     "iopub.status.idle": "2025-04-26T11:36:22.424529Z",
     "shell.execute_reply": "2025-04-26T11:36:22.423048Z"
    },
    "papermill": {
     "duration": 0.032609,
     "end_time": "2025-04-26T11:36:22.427461",
     "exception": false,
     "start_time": "2025-04-26T11:36:22.394852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>1305</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>1306</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>1307</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>1308</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>1309</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived\n",
       "0            892         0\n",
       "1            893         0\n",
       "2            894         0\n",
       "3            895         0\n",
       "4            896         0\n",
       "..           ...       ...\n",
       "413         1305         0\n",
       "414         1306         1\n",
       "415         1307         0\n",
       "416         1308         0\n",
       "417         1309         0\n",
       "\n",
       "[418 rows x 2 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index1 = test_df['PassengerId']\n",
    "\n",
    "dictn = {'PassengerId' : index1, 'Survived': y_prdct1.flatten()}\n",
    "out = pd.DataFrame(dictn)\n",
    "\n",
    "out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "0e455195",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:22.459884Z",
     "iopub.status.busy": "2025-04-26T11:36:22.459507Z",
     "iopub.status.idle": "2025-04-26T11:36:22.465065Z",
     "shell.execute_reply": "2025-04-26T11:36:22.463814Z"
    },
    "papermill": {
     "duration": 0.024543,
     "end_time": "2025-04-26T11:36:22.467420",
     "exception": false,
     "start_time": "2025-04-26T11:36:22.442877",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "os.getcwd()\n",
    "os.chdir('/kaggle/working/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2a640a05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:22.498482Z",
     "iopub.status.busy": "2025-04-26T11:36:22.497907Z",
     "iopub.status.idle": "2025-04-26T11:36:22.505163Z",
     "shell.execute_reply": "2025-04-26T11:36:22.503689Z"
    },
    "papermill": {
     "duration": 0.02604,
     "end_time": "2025-04-26T11:36:22.507845",
     "exception": false,
     "start_time": "2025-04-26T11:36:22.481805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import datetime as dt\n",
    "today = dt.datetime.today().strftime(\"%Y%m%d\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "45d9f3af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:22.539822Z",
     "iopub.status.busy": "2025-04-26T11:36:22.539457Z",
     "iopub.status.idle": "2025-04-26T11:36:22.549218Z",
     "shell.execute_reply": "2025-04-26T11:36:22.548104Z"
    },
    "papermill": {
     "duration": 0.02866,
     "end_time": "2025-04-26T11:36:22.551824",
     "exception": false,
     "start_time": "2025-04-26T11:36:22.523164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "out.to_csv(f'titanic_lr_pred_{today}.csv', index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "84d8debc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T11:36:22.582137Z",
     "iopub.status.busy": "2025-04-26T11:36:22.581637Z",
     "iopub.status.idle": "2025-04-26T11:36:24.138916Z",
     "shell.execute_reply": "2025-04-26T11:36:24.136839Z"
    },
    "papermill": {
     "duration": 1.57537,
     "end_time": "2025-04-26T11:36:24.141864",
     "exception": false,
     "start_time": "2025-04-26T11:36:22.566494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\r\n",
      "  File \"/opt/conda/bin/kaggle\", line 5, in <module>\r\n",
      "    from kaggle.cli import main\r\n",
      "  File \"/opt/conda/lib/python3.10/site-packages/kaggle/__init__.py\", line 7, in <module>\r\n",
      "    api.authenticate()\r\n",
      "  File \"/opt/conda/lib/python3.10/site-packages/kaggle/api/kaggle_api_extended.py\", line 398, in authenticate\r\n",
      "    raise IOError('Could not find {}. Make sure it\\'s located in'\r\n",
      "OSError: Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method.\r\n"
     ]
    }
   ],
   "source": [
    "! kaggle competitions submit -c titanic -f /kaggle/working/titanic_pred.csv -m \"pred_20250315\""
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 26502,
     "sourceId": 3136,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 32.944885,
   "end_time": "2025-04-26T11:36:27.141638",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-26T11:35:54.196753",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
